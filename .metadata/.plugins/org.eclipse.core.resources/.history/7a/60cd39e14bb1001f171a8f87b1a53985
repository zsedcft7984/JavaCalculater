package calculator;

import javax.swing.*;
import java.awt.event.*;

public class Action implements ActionListener {
    private JTextField textField;   // 수식 입력용 필드
    private JTextField resultField; // 결과 표시용 필드
    private static double operand1 = 0;  // 첫 번째 피연산자
    private static double operand2 = 0;  // 두 번째 피연산자
    private static String operator = ""; // 연산자
    private static boolean operatorEntered = false; // 연산자가 입력되었는지 확인하는 변수
    private static double previousResult = 0; // 이전 계산 결과 저장

    // 생성자
    public Action(JTextField textField, JTextField resultField) {
        this.textField = textField;
        this.resultField = resultField;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton sourceButton = (JButton) e.getSource();
        String buttonText = sourceButton.getText();

        if (buttonText.matches("[0-9]")) {
            // 숫자 입력 시
            String currentText = textField.getText();
            textField.setText(currentText + buttonText);
            resultField.setText(textField.getText()); // resultField 업데이트
        } else if (buttonText.equals("+") || buttonText.equals("-") || 
                   buttonText.equals("x") || buttonText.equals("×") || 
                   buttonText.equals("÷")) {
            // 연산자 입력 시
            if (!operatorEntered) {
                operand1 = Double.parseDouble(textField.getText()); // operand1 저장
                operator = buttonText; // 연산자 저장
                textField.setText(""); // operand2 입력을 위한 준비
                resultField.setText(formatNumber(operand1) + " " + operator); // 수식 표시
                operatorEntered = true; // 연산자가 입력되었음을 표시
            } else {
                // 이미 연산자가 입력된 상태에서 새로운 연산자 입력 시
                // 이전 결과를 operand1로 초기화하고 새로운 연산자 표시
                previousResult = Double.parseDouble(textField.getText()); // 이전 operand2 값
                operand1 = previousResult; // 이전 결과로 operand1 초기화
                operator = buttonText; // 새 연산자 저장
                textField.setText(""); // operand2 입력을 위한 준비
                resultField.setText(formatNumber(previousResult) + " " + operator); // 새 수식 표시
            }
        } else if (buttonText.equals("=")) {
            // "=" 버튼 처리
            if (operatorEntered) {
                operand2 = Double.parseDouble(textField.getText()); // operand2 저장
                double result = calculate(operand1, operand2, operator); // 결과 계산
                resultField.setText(formatNumber(result)); // 결과 표시
                previousResult = result; // 계산된 결과를 이전 결과로 저장
                operand1 = result; // 다음 계산을 위해 결과를 operand1으로 설정
                operatorEntered = false; // 연산자가 완료되었으므로 리셋
                textField.setText(""); // 텍스트 필드 초기화
            }
        } else if (buttonText.equals("C")) {
            // 전체 초기화
            textField.setText("");
            resultField.setText("");
            operand1 = 0;
            operand2 = 0;
            operator = "";
            operatorEntered = false;
            previousResult = 0;
        }
    }

    // 사칙연산 계산 메서드
    private double calculate(double operand1, double operand2, String operator) {
        switch (operator) {
            case "+": return operand1 + operand2;
            case "-": return operand1 - operand2;
            case "x": return operand1 * operand2; // 곱셈 처리
            case "×": return operand1 * operand2; // 곱셈 처리 (×로 입력된 경우)
            case "÷": return operand2 != 0 ? operand1 / operand2 : Double.NaN; // 나눗셈 처리
            default: return 0;
        }
    }

    // 숫자 형식화 메서드
    private String formatNumber(double number) {
        // 결과값이 정수면 소수점 제거
        if (number == (int) number) {
            return String.valueOf((int) number);
        } else {
            return String.valueOf(number);
        }
    }
}
